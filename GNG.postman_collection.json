{
	"info": {
		"_postman_id": "29b8bc2c-8e55-43b9-98d8-195c68ad40c1",
		"name": "GNG",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "32322118",
		"_collection_link": "https://martian-trinity-878023.postman.co/workspace/GNG~e61214a7-bb2c-4a66-9369-9f3a2b45330a/collection/32322118-29b8bc2c-8e55-43b9-98d8-195c68ad40c1?action=share&source=collection_link&creator=32322118"
	},
	"item": [
		{
			"name": "Create",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var firstname = pm.variables.replaceIn('{{$randomFirstName}}')\r",
							"console.log(firstname)\r",
							"pm.environment.set(\"firstname\",firstname)\r",
							"\r",
							"var lastname = pm.variables.replaceIn('{{$randomLastName}}')\r",
							"console.log(lastname)\r",
							"pm.environment.set(\"lastname\",lastname)\r",
							"\r",
							"/*var Date = pm.variables.replaceIn('{{$randomDateFuture}}')\r",
							"console.log(Date)\r",
							"pm.environment.set(\"Date\",Date)\r",
							"*/\r",
							"//Date\r",
							"const date = require('moment')\r",
							"const today = date()\r",
							"/*console.log(date().format(\"YYY-MM-DD\"))\r",
							"Date after 4 days\r",
							"console.log(date().add(4,'d').format(\"YYY-MM-DD\"))\r",
							"Dayes before 4 days\r",
							"console.log(date().subtract(2,'d').format(\"YYYY-MM-DD\"))\r",
							"*/\r",
							"\r",
							"//CHECKIN\r",
							"var number = Math.floor(Math.random()*10);\r",
							"var chekin = today.add(number, 'd').format(\"YYYY-MM-DD\")\r",
							"console.log(chekin)\r",
							"pm.environment.set(\"checkin\",chekin)\r",
							"\r",
							"//CHECKOUT\r",
							"var futurenumbernumber = Math.floor(Math.random()*100);\r",
							"var futurenumber = Math.random()*100;\r",
							"var checkout = today.add(futurenumber, 'd').format(\"YYYY-MM-DD\")\r",
							"console.log(checkout)\r",
							"pm.environment.set(\"checkout\",checkout)\r",
							"\r",
							"//DEPOSITPAID\r",
							"var depositpaid = pm.variables.replaceIn('{{$randomBoolean}}')\r",
							"console.log(depositpaid)\r",
							"pm.environment.set(\"depositpaid\",depositpaid)\r",
							"\r",
							"//Totalprice\r",
							"\r",
							"var totalprice = pm.variables.replaceIn('{{$randomPrice}}')\r",
							"console.log(totalprice)\r",
							"pm.environment.set(\"totalprice\",totalprice)\r",
							"\r",
							"//ADDITIONALNEEDS\r",
							"var additionalneeds = pm.variables.replaceIn('{{$randomProductName}}')\r",
							"console.log(additionalneeds)\r",
							"pm.environment.set(\"additionalneeds\",additionalneeds)\r",
							"\r",
							"\r",
							"\r",
							"/*\r",
							"const shanto = require('moment')\r",
							"const fine = shanto()\r",
							"console.log(shanto().add(9,'M').format(\"DD-MM-YYYY\"))\r",
							"\r",
							"const min = require('moment')\r",
							"const month = min()\r",
							"console.log(min().subtract(3,'M').format(\"DD-MM-YYYY\"))\r",
							"\r",
							"\r",
							" var minn = Math.random()*10;\r",
							" var mio = today.add(4,'Y').format(\"DD-MM-YYYY\")\r",
							" console.log(mio)\r",
							" */\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var shanto = pm.response.json()\r",
							"pm.environment.set(\"Id\",shanto.bookingid)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Cookie",
						"value": "token=",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"firstname\" : \"{{firstname}}\",\r\n\t\"lastname\" : \"{{lastname}}\",\r\n\t\"totalprice\" : \"{{totalprice}}\",\r\n\t\"depositpaid\" : \"{{depositpaid}}\",\r\n\t\"bookingdates\" : {\r\n    \t\"checkin\" : \"{{checkin}}\",\r\n    \t\"checkout\" : \"{{checkout}}\"\r\n\t},\r\n\t\"additionalneeds\" : \"{{additionalneeds}}\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base-url}}/booking/",
					"host": [
						"{{base-url}}"
					],
					"path": [
						"booking",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Get",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var statusCode = pm.response.code\r",
							"console.log(statusCode)\r",
							"\r",
							"switch(statusCode){\r",
							"\r",
							"            case 200:\r",
							"            var shanto = pm.response.json()\r",
							"\r",
							"        pm.test(\"Status code is 200\", function () {\r",
							"            pm.response.to.have.status(200);\r",
							"        });\r",
							"\r",
							"        pm.test(\"firstname\", function () {\r",
							"            pm.expect(pm.environment.get(\"firstname\")).to.eql(shanto.firstname)\r",
							"        })\r",
							"\r",
							"        pm.test(\"lastname\", function () {\r",
							"            pm.expect(pm.environment.get(\"lastname\")).to.eql(shanto.lastname)\r",
							"        })\r",
							"\r",
							"\r",
							"        pm.test(\"totalprice\", function () {\r",
							"            pm.expect(parseInt(pm.environment.get(\"totalprice\"))).to.eql(shanto.totalprice)\r",
							"        })\r",
							"        pm.test(\"id\", function () {\r",
							"            pm.expect(pm.environment.get(\"id\")).to.eql(shanto.id)\r",
							"        })\r",
							"\r",
							"        pm.test(\"checkin\", function () {\r",
							"            pm.expect(pm.environment.get(\"checkin\")).to.eql(shanto.bookingdates.checkin)\r",
							"        })\r",
							"\r",
							"        pm.test(\"checkout\", function () {\r",
							"            pm.expect(pm.environment.get(\"checkout\")).to.eql(shanto.bookingdates.checkout)\r",
							"        })\r",
							"\r",
							"        pm.test(\"depositpaid\", function () {\r",
							"            pm.expect(pm.environment.get(\"depositpaid\")).to.eql(shanto.depositpaid.toString())\r",
							"        })\r",
							"            break;\r",
							"    case 404:\r",
							"        pm.test(\"Not Found\")\r",
							"        break;\r",
							"        \r",
							"    case 500:\r",
							"        pm.test(\"Internal Server Error\")\r",
							"        break;\r",
							"\r",
							"        }\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base-url}}/booking/{{Id}}",
					"host": [
						"{{base-url}}"
					],
					"path": [
						"booking",
						"{{Id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Auth",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var shanto = pm.response.json()\r",
							"\r",
							"pm.environment.set(\"token\",shanto.token)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Cookie",
						"value": "token={{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"username\": \"admin\",\r\n\t\"password\": \"password123\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://restful-booker.herokuapp.com/auth",
					"protocol": "https",
					"host": [
						"restful-booker",
						"herokuapp",
						"com"
					],
					"path": [
						"auth"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var firstname = pm.variables.replaceIn('{{$randomFirstName}}')\r",
							"console.log(firstname)\r",
							"pm.environment.set(\"firstname\",firstname)\r",
							"\r",
							"var lastname = pm.variables.replaceIn('{{$randomLastName}}')\r",
							"console.log(lastname)\r",
							"pm.environment.set(\"lastname\",lastname)\r",
							"\r",
							"/*var Date = pm.variables.replaceIn('{{$randomDateFuture}}')\r",
							"console.log(Date)\r",
							"pm.environment.set(\"Date\",Date)\r",
							"*/\r",
							"//Date\r",
							"const date = require('moment')\r",
							"const today = date()\r",
							"/*console.log(date().format(\"YYY-MM-DD\"))\r",
							"Date after 4 days\r",
							"console.log(date().add(4,'d').format(\"YYY-MM-DD\"))\r",
							"Dayes before 4 days\r",
							"console.log(date().subtract(2,'d').format(\"YYYY-MM-DD\"))\r",
							"*/\r",
							"\r",
							"//CHECKIN\r",
							"var number = Math.floor(Math.random()*10);\r",
							"var chekin = today.add(number, 'd').format(\"YYYY-MM-DD\")\r",
							"console.log(chekin)\r",
							"pm.environment.set(\"checkin\",chekin)\r",
							"\r",
							"//CHECKOUT\r",
							"var futurenumbernumber = Math.floor(Math.random()*100);\r",
							"var futurenumber = Math.random()*100;\r",
							"var checkout = today.add(futurenumber, 'd').format(\"YYYY-MM-DD\")\r",
							"console.log(checkout)\r",
							"pm.environment.set(\"checkout\",checkout)\r",
							"\r",
							"//DEPOSITPAID\r",
							"var depositpaid = pm.variables.replaceIn('{{$randomBoolean}}')\r",
							"console.log(depositpaid)\r",
							"pm.environment.set(\"depositpaid\",depositpaid)\r",
							"\r",
							"//Totalprice\r",
							"\r",
							"var totalprice = pm.variables.replaceIn('{{$randomPrice}}')\r",
							"console.log(totalprice)\r",
							"pm.environment.set(\"totalprice\",totalprice)\r",
							"\r",
							"//ADDITIONALNEEDS\r",
							"var additionalneeds = pm.variables.replaceIn('{{$randomProductName}}')\r",
							"console.log(additionalneeds)\r",
							"pm.environment.set(\"additionalneeds\",additionalneeds)\r",
							"\r",
							"\r",
							"\r",
							"/*\r",
							"const shanto = require('moment')\r",
							"const fine = shanto()\r",
							"console.log(shanto().add(9,'M').format(\"DD-MM-YYYY\"))\r",
							"\r",
							"const min = require('moment')\r",
							"const month = min()\r",
							"console.log(min().subtract(3,'M').format(\"DD-MM-YYYY\"))\r",
							"\r",
							"\r",
							" var minn = Math.random()*10;\r",
							" var mio = today.add(4,'Y').format(\"DD-MM-YYYY\")\r",
							" console.log(mio)\r",
							" */"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"            var statusCode = pm.response.code\r",
							"            if(statusCode==400 || statusCode==403){\r",
							"            pm.test(\"Token\")\r",
							"            }\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Cookie",
						"value": "token={{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"firstname\" : \"{{firstname}}\",\r\n\t\"lastname\" : \"{{lastname}}\",\r\n\t\"totalprice\" : {{totalprice}},\r\n\t\"depositpaid\" : {{depositpaid}},\r\n\t\"bookingdates\" : {\r\n    \t\"checkin\" : \"{{checkin}}\",\r\n    \t\"checkout\" : \"{{checkout}}\"\r\n\t},\r\n\t\"additionalneeds\" : \"{{additionalneeds}}\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base-url}}/booking/{{Id}}",
					"host": [
						"{{base-url}}"
					],
					"path": [
						"booking",
						"{{Id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Verify update",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var statusCode = pm.response.code\r",
							"\r",
							"if(statusCode==200){\r",
							"var shanto = pm.response.json()\r",
							"\r",
							"        pm.test(\"Status code is 200\", function () {\r",
							"            pm.response.to.have.status(200);\r",
							"        });\r",
							"\r",
							"        pm.test(\"firstname\", function () {\r",
							"            pm.expect(pm.environment.get(\"firstname\")).to.eql(shanto.firstname)\r",
							"        })\r",
							"\r",
							"        pm.test(\"lastname\", function () {\r",
							"            pm.expect(pm.environment.get(\"lastname\")).to.eql(shanto.lastname)\r",
							"        })\r",
							"\r",
							"\r",
							"        pm.test(\"totalprice\", function () {\r",
							"            pm.expect(parseInt(pm.environment.get(\"totalprice\"))).to.eql(shanto.totalprice)\r",
							"        })\r",
							"        pm.test(\"id\", function () {\r",
							"            pm.expect(pm.environment.get(\"id\")).to.eql(shanto.id)\r",
							"        })\r",
							"\r",
							"        pm.test(\"checkin\", function () {\r",
							"            pm.expect(pm.environment.get(\"checkin\")).to.eql(shanto.bookingdates.checkin)\r",
							"        })\r",
							"\r",
							"        pm.test(\"checkout\", function () {\r",
							"            pm.expect(pm.environment.get(\"checkout\")).to.eql(shanto.bookingdates.checkout)\r",
							"        })\r",
							"\r",
							"        pm.test(\"depositpaid\", function () {\r",
							"            pm.expect(pm.environment.get(\"depositpaid\")).to.eql(shanto.depositpaid.toString())\r",
							"        })\r",
							"}\r",
							"    else if(statusCode==400){\r",
							"        pm.test(\"Not Found\")\r",
							"    }\r",
							"    \r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base-url}}/booking/{{Id}}}",
					"host": [
						"{{base-url}}"
					],
					"path": [
						"booking",
						"{{Id}}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete",
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Cookie",
						"value": "token={{token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{base-url}}/booking/{{Id}}",
					"host": [
						"{{base-url}}"
					],
					"path": [
						"booking",
						"{{Id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Verify delete",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var shanto = pm.response.json()\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"firstname\", function () {\r",
							"    pm.expect(pm.environment.get(\"firstname\")).to.eql(shanto.firstname)\r",
							"})\r",
							"\r",
							"pm.test(\"lastname\", function () {\r",
							"    pm.expect(pm.environment.get(\"lastname\")).to.eql(shanto.lastname)\r",
							"})\r",
							"\r",
							"\r",
							"pm.test(\"totalprice\", function () {\r",
							"    pm.expect(parseInt(pm.environment.get(\"totalprice\"))).to.eql(shanto.totalprice)\r",
							"})\r",
							"pm.test(\"id\", function () {\r",
							"    pm.expect(pm.environment.get(\"id\")).to.eql(shanto.id)\r",
							"})\r",
							"\r",
							"pm.test(\"checkin\", function () {\r",
							"    pm.expect(pm.environment.get(\"checkin\")).to.eql(shanto.bookingdates.checkin)\r",
							"})\r",
							"\r",
							"pm.test(\"checkout\", function () {\r",
							"    pm.expect(pm.environment.get(\"checkout\")).to.eql(shanto.bookingdates.checkout)\r",
							"})\r",
							"\r",
							"pm.test(\"depositpaid\", function () {\r",
							"    pm.expect(pm.environment.get(\"depositpaid\")).to.eql(shanto.depositpaid.toString())\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base-url}}/booking/{{Id}}",
					"host": [
						"{{base-url}}"
					],
					"path": [
						"booking",
						"{{Id}}"
					]
				}
			},
			"response": []
		}
	]
}